version: '3.8'

services:
  # Frontend service
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile.prod
    container_name: lms-frontend
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - lms-network
    # In production, the frontend will be served by Nginx

  # Backend service
  backend:
    build:
      context: ./src/backend
      dockerfile: Dockerfile.prod
    container_name: lms-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=postgres
      - DB_PORT=5432
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE=30d
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - EMAIL_FROM=${EMAIL_FROM}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_BUCKET_NAME=${AWS_BUCKET_NAME}
      - LAB_PROVIDER=${LAB_PROVIDER}
      - LAB_API_KEY=${LAB_API_KEY}
      - LAB_API_URL=${LAB_API_URL}
    depends_on:
      - postgres
    networks:
      - lms-network

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: lms-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - lms-network

  # Redis for caching
  redis:
    image: redis:alpine
    container_name: lms-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - lms-network

  # Nginx service for serving frontend and proxying API requests
  nginx:
    image: nginx:alpine
    container_name: lms-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/html:/usr/share/nginx/html
      - ./src/frontend/dist:/usr/share/nginx/html/app
    depends_on:
      - frontend
      - backend
    networks:
      - lms-network

  # Guacamole client for lab environment
  guacamole:
    image: guacamole/guacamole:1.4.0
    container_name: lms-guacamole
    restart: unless-stopped
    environment:
      - GUACD_HOSTNAME=guacd
      - POSTGRES_HOSTNAME=postgres
      - POSTGRES_DATABASE=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    depends_on:
      - guacd
      - postgres
    networks:
      - lms-network

  # Guacamole daemon
  guacd:
    image: guacamole/guacd:1.4.0
    container_name: lms-guacd
    restart: unless-stopped
    networks:
      - lms-network

  # Backup service
  backup:
    image: postgres:14-alpine
    container_name: lms-backup
    restart: unless-stopped
    volumes:
      - ./backups:/backups
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    command: >
      sh -c "
        mkdir -p /backups &&
        echo '0 0 * * * pg_dump -h postgres -U ${DB_USER} -d ${DB_NAME} -f /backups/backup_$$(date +\\%Y\\%m\\%d\\%H\\%M\\%S).sql' > /var/spool/cron/crontabs/root &&
        echo '0 0 * * 0 find /backups -name \"backup_*.sql\" -type f -mtime +7 -delete' >> /var/spool/cron/crontabs/root &&
        crond -f
      "
    depends_on:
      - postgres
    networks:
      - lms-network

volumes:
  postgres-data:
  redis-data:

networks:
  lms-network:
    driver: bridge
